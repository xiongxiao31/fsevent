/* Automatically generated nanopb header */
/* Generated by nanopb-1.0.0-dev */

#ifndef PB_VBPROTO_PB_PB_H_INCLUDED
#define PB_VBPROTO_PB_PB_H_INCLUDED
#include "pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
/* *
 Request to lock resources (versioned and/or unversioned). */
typedef struct _LockRequest {
    /* * User requesting the lock */
    char *user;
    /* * Lock session ID */
    bool has_sessionId;
    uint64_t sessionId;
    /* * Time of the lock request */
    bool has_time;
    uint64_t time;
    /* * Branch revision ID (RID) for the lock */
    int64_t rid;
    /* * Skip locked files */
    bool skipLocked;
    /* * Skip other users' locked files */
    bool skipOther;
    /* * Force unlock */
    bool forceUnlock;
    /* * Global lock across all branches */
    bool global;
    /* * Simulate lock without applying it */
    bool dryrun;
    /* * Optional user comment */
    char *comment;
    /* * Versioned files to lock (optional) */
    pb_bytes_array_t *fileBitmap;
    /* * Unversioned files to lock (optional) */
    pb_size_t uvFile_count;
    char **uvFile;
    /* * Folder to lock (optional) */
    pb_size_t folder_count;
    char **folder;
    /* * Specified field for request lock information: User */
    char *specifiedUser;
    /* * Specified field for request lock information: Revision ID (RID) */
    bool has_specifiedRid;
    int64_t specifiedRid;
    /* * Exclude field for request lock information: User */
    char *excludedUser;
    /* * Exclude field for request lock information: Revision ID (RID) */
    bool has_excludedRid;
    int64_t excludedRid;
} LockRequest;

typedef struct _LockedInfo {
    /* * Lock session ID */
    uint64_t sid;
    /* * User requesting the lock */
    char *user;
    /* * Branch revision ID (RID) for the lock */
    int64_t rid;
    /* * Lock release timestamp */
    uint64_t etime;
    /* * Optional user comment */
    char *comment;
    /* * Versioned files to lock (optional) */
    pb_bytes_array_t *fileBitmap;
    /* * Unversioned files to lock (optional) */
    pb_size_t uvFile_count;
    char **uvFile;
} LockedInfo;

/* *
 Lock response indicating success or failure. */
typedef struct _LockResponse {
    /* Whether the lock was successfully applied */
    bool success;
    pb_size_t lockedInfo_count;
    struct _LockedInfo *lockedInfo;
    char *errMsg;
} LockResponse;

/* *
 Test message format for VBProto. */
typedef struct _VBProto {
    char *str;
    pb_bytes_array_t *byte;
    pb_size_t rStr_count;
    char **rStr;
} VBProto;

/* *
 Payload structure for versioned responses */
typedef struct _Payload {
    /* * Reserved for future version compatibility */
    bool has_version;
    uint32_t version;
    pb_size_t which_method;
    union _Payload_method {
        VBProto vbProto;
        LockRequest lockRequest;
        LockResponse lockResponse;
    } method;
} Payload;

/* Metadata for a single monitored file */
typedef struct _FileEventMeta {
    /* Absolute file path */
    char *path;
    /* Incremental flag used by daemon processes */
    int64_t flag;
} FileEventMeta;

/* Batch of file monitoring events sent between client and server */
typedef struct _FileEventBatch {
    /* List of monitored file metadata (serialized) */
    pb_size_t files_count;
    pb_bytes_array_t **files;
    /* The latest timestamp observed in this batch */
    int64_t lastUpdatedTime;
    /* Unique identifier for this event batch */
    uint64_t eventId;
} FileEventBatch;

typedef struct _RegisterDirectoryRequest {
    char *path;
} RegisterDirectoryRequest;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define LockRequest_init_default                 {NULL, false, 0, false, 0, 0, 0, 0, 0, 0, 0, NULL, NULL, 0, NULL, 0, NULL, NULL, false, 0, NULL, false, 0}
#define LockedInfo_init_default                  {0, NULL, 0, 0, NULL, NULL, 0, NULL}
#define LockResponse_init_default                {0, 0, NULL, NULL}
#define Payload_init_default                     {false, 0, 0, {VBProto_init_default}}
#define VBProto_init_default                     {NULL, NULL, 0, NULL}
#define FileEventMeta_init_default               {NULL, 0}
#define FileEventBatch_init_default              {0, NULL, 0, 0}
#define RegisterDirectoryRequest_init_default    {NULL}
#define LockRequest_init_zero                    {NULL, false, 0, false, 0, 0, 0, 0, 0, 0, 0, NULL, NULL, 0, NULL, 0, NULL, NULL, false, 0, NULL, false, 0}
#define LockedInfo_init_zero                     {0, NULL, 0, 0, NULL, NULL, 0, NULL}
#define LockResponse_init_zero                   {0, 0, NULL, NULL}
#define Payload_init_zero                        {false, 0, 0, {VBProto_init_zero}}
#define VBProto_init_zero                        {NULL, NULL, 0, NULL}
#define FileEventMeta_init_zero                  {NULL, 0}
#define FileEventBatch_init_zero                 {0, NULL, 0, 0}
#define RegisterDirectoryRequest_init_zero       {NULL}

/* Field tags (for use in manual encoding/decoding) */
#define LockRequest_user_tag                     1
#define LockRequest_sessionId_tag                2
#define LockRequest_time_tag                     3
#define LockRequest_rid_tag                      4
#define LockRequest_skipLocked_tag               5
#define LockRequest_skipOther_tag                6
#define LockRequest_forceUnlock_tag              7
#define LockRequest_global_tag                   8
#define LockRequest_dryrun_tag                   9
#define LockRequest_comment_tag                  10
#define LockRequest_fileBitmap_tag               11
#define LockRequest_uvFile_tag                   12
#define LockRequest_folder_tag                   13
#define LockRequest_specifiedUser_tag            14
#define LockRequest_specifiedRid_tag             15
#define LockRequest_excludedUser_tag             16
#define LockRequest_excludedRid_tag              17
#define LockedInfo_sid_tag                       1
#define LockedInfo_user_tag                      2
#define LockedInfo_rid_tag                       3
#define LockedInfo_etime_tag                     4
#define LockedInfo_comment_tag                   8
#define LockedInfo_fileBitmap_tag                9
#define LockedInfo_uvFile_tag                    10
#define LockResponse_success_tag                 1
#define LockResponse_lockedInfo_tag              2
#define LockResponse_errMsg_tag                  3
#define VBProto_str_tag                          1
#define VBProto_byte_tag                         2
#define VBProto_rStr_tag                         3
#define Payload_version_tag                      1
#define Payload_vbProto_tag                      2
#define Payload_lockRequest_tag                  3
#define Payload_lockResponse_tag                 4
#define FileEventMeta_path_tag                   1
#define FileEventMeta_flag_tag                   2
#define FileEventBatch_files_tag                 1
#define FileEventBatch_lastUpdatedTime_tag       2
#define FileEventBatch_eventId_tag               3
#define RegisterDirectoryRequest_path_tag        1

/* Struct field encoding specification for nanopb */
#define LockRequest_FIELDLIST(X, a) \
X(a, POINTER,  REQUIRED, STRING,   user,              1) \
X(a, STATIC,   OPTIONAL, UINT64,   sessionId,         2) \
X(a, STATIC,   OPTIONAL, UINT64,   time,              3) \
X(a, STATIC,   REQUIRED, INT64,    rid,               4) \
X(a, STATIC,   REQUIRED, BOOL,     skipLocked,        5) \
X(a, STATIC,   REQUIRED, BOOL,     skipOther,         6) \
X(a, STATIC,   REQUIRED, BOOL,     forceUnlock,       7) \
X(a, STATIC,   REQUIRED, BOOL,     global,            8) \
X(a, STATIC,   REQUIRED, BOOL,     dryrun,            9) \
X(a, POINTER,  OPTIONAL, STRING,   comment,          10) \
X(a, POINTER,  OPTIONAL, BYTES,    fileBitmap,       11) \
X(a, POINTER,  REPEATED, STRING,   uvFile,           12) \
X(a, POINTER,  REPEATED, STRING,   folder,           13) \
X(a, POINTER,  OPTIONAL, STRING,   specifiedUser,    14) \
X(a, STATIC,   OPTIONAL, INT64,    specifiedRid,     15) \
X(a, POINTER,  OPTIONAL, STRING,   excludedUser,     16) \
X(a, STATIC,   OPTIONAL, INT64,    excludedRid,      17)
#define LockRequest_CALLBACK NULL
#define LockRequest_DEFAULT NULL

#define LockedInfo_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, UINT64,   sid,               1) \
X(a, POINTER,  OPTIONAL, STRING,   user,              2) \
X(a, STATIC,   REQUIRED, INT64,    rid,               3) \
X(a, STATIC,   REQUIRED, UINT64,   etime,             4) \
X(a, POINTER,  OPTIONAL, STRING,   comment,           8) \
X(a, POINTER,  OPTIONAL, BYTES,    fileBitmap,        9) \
X(a, POINTER,  REPEATED, STRING,   uvFile,           10)
#define LockedInfo_CALLBACK NULL
#define LockedInfo_DEFAULT NULL

#define LockResponse_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, BOOL,     success,           1) \
X(a, POINTER,  REPEATED, MESSAGE,  lockedInfo,        2) \
X(a, POINTER,  OPTIONAL, STRING,   errMsg,            3)
#define LockResponse_CALLBACK NULL
#define LockResponse_DEFAULT NULL
#define LockResponse_lockedInfo_MSGTYPE LockedInfo

#define Payload_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   version,           1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (method,vbProto,method.vbProto),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (method,lockRequest,method.lockRequest),   3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (method,lockResponse,method.lockResponse),   4)
#define Payload_CALLBACK NULL
#define Payload_DEFAULT NULL
#define Payload_method_vbProto_MSGTYPE VBProto
#define Payload_method_lockRequest_MSGTYPE LockRequest
#define Payload_method_lockResponse_MSGTYPE LockResponse

#define VBProto_FIELDLIST(X, a) \
X(a, POINTER,  OPTIONAL, STRING,   str,               1) \
X(a, POINTER,  OPTIONAL, BYTES,    byte,              2) \
X(a, POINTER,  REPEATED, STRING,   rStr,              3)
#define VBProto_CALLBACK NULL
#define VBProto_DEFAULT NULL

#define FileEventMeta_FIELDLIST(X, a) \
X(a, POINTER,  REQUIRED, STRING,   path,              1) \
X(a, STATIC,   REQUIRED, INT64,    flag,              2)
#define FileEventMeta_CALLBACK NULL
#define FileEventMeta_DEFAULT NULL

#define FileEventBatch_FIELDLIST(X, a) \
X(a, POINTER,  REPEATED, BYTES,    files,             1) \
X(a, STATIC,   REQUIRED, INT64,    lastUpdatedTime,   2) \
X(a, STATIC,   REQUIRED, UINT64,   eventId,           3)
#define FileEventBatch_CALLBACK NULL
#define FileEventBatch_DEFAULT NULL

#define RegisterDirectoryRequest_FIELDLIST(X, a) \
X(a, POINTER,  REQUIRED, STRING,   path,              1)
#define RegisterDirectoryRequest_CALLBACK NULL
#define RegisterDirectoryRequest_DEFAULT NULL

extern const pb_msgdesc_t LockRequest_msg;
extern const pb_msgdesc_t LockedInfo_msg;
extern const pb_msgdesc_t LockResponse_msg;
extern const pb_msgdesc_t Payload_msg;
extern const pb_msgdesc_t VBProto_msg;
extern const pb_msgdesc_t FileEventMeta_msg;
extern const pb_msgdesc_t FileEventBatch_msg;
extern const pb_msgdesc_t RegisterDirectoryRequest_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define LockRequest_fields &LockRequest_msg
#define LockedInfo_fields &LockedInfo_msg
#define LockResponse_fields &LockResponse_msg
#define Payload_fields &Payload_msg
#define VBProto_fields &VBProto_msg
#define FileEventMeta_fields &FileEventMeta_msg
#define FileEventBatch_fields &FileEventBatch_msg
#define RegisterDirectoryRequest_fields &RegisterDirectoryRequest_msg

/* Maximum encoded size of messages (where known) */
/* LockRequest_size depends on runtime parameters */
/* LockedInfo_size depends on runtime parameters */
/* LockResponse_size depends on runtime parameters */
/* Payload_size depends on runtime parameters */
/* VBProto_size depends on runtime parameters */
/* FileEventBatch_size depends on runtime parameters */
#define FileEventMeta_size                       1037
#define RegisterDirectoryRequest_size            1026
#define VBPROTO_PB_PB_H_MAX_SIZE                 FileEventMeta_size

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
